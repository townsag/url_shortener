// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertMapping = `-- name: InsertMapping :one
INSERT INTO url_mapping (id, long_url, created_at)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO NOTHING
RETURNING id
`

type InsertMappingParams struct {
	ID        string
	LongUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertMapping(ctx context.Context, arg InsertMappingParams) (string, error) {
	row := q.db.QueryRow(ctx, insertMapping, arg.ID, arg.LongUrl, arg.CreatedAt)
	var id string
	err := row.Scan(&id)
	return id, err
}

const selectMapping = `-- name: SelectMapping :one
SELECT id, long_url, created_at, visits FROM url_mapping
WHERE id = $1 LIMIT 1
`

func (q *Queries) SelectMapping(ctx context.Context, id string) (UrlMapping, error) {
	row := q.db.QueryRow(ctx, selectMapping, id)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.CreatedAt,
		&i.Visits,
	)
	return i, err
}
